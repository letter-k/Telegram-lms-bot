from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
from create_bot import db
from keyboards import kb_client
from lms_synergy_library import LMS
from asyncio import sleep
from datetime import datetime as dt


class correct_date:
    @staticmethod
    def correct_date(date: str) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç—ã

        :param date: –î–∞—Ç–∞
        :type date: str

        :return: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        :rtype: str

        :Example:

        >>> from scripts import correct_date
        >>> correct_date.correct_date("01.01.21, Mon")
        "01.01.21, –ø–Ω"
        """

        day_of_week = {
            "–ø–Ω": "Mon",
            "–≤—Ç": "Tue",
            "—Å—Ä": "Wed",
            "—á—Ç": "Thu",
            "–ø—Ç": "Fri",
            "—Å–±": "Sat",
            "–≤—Å": "Sun",
            "Mon": "–ø–Ω",
            "Tue": "–≤—Ç",
            "Wed": "—Å—Ä",
            "Thu": "—á—Ç",
            "Fri": "–ø—Ç",
            "Sat": "—Å–±",
            "Sun": "–≤—Å",
        }

        date = date.split(", ")
        date[1] = day_of_week[date[1]]
        date = ", ".join(date)

        return date


async def cmd_schedule(message: types.Message):
    if not await db.userExsist(message.from_user.id):
        await message.answer(
            f"‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        msg = await message.answer("‚åõ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚åõ")
        info = await db.userInfo(message.from_user.id)
        lms = LMS(info["email"], info["password"], leanguage="ru")
        schedule = lms.get_schedule()
        date = correct_date.correct_date(dt.now().strftime("%d.%m.%y, %a"))
        if date in schedule:
            await msg.edit_text(f"üìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            lessons, times = schedule[date], schedule[date].keys()
            for time in times:
                await message.answer(
                    "üïí –ù–∞—á–∞–ª–æ –ø–∞—Ä—ã: %s \nüìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: %s \nüè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: %s \nüìù –¢–∏–ø –ø–∞—Ä—ã: %s \nüë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s"
                    % (
                        time,
                        lessons[time]["name"],
                        lessons[time]["classroom"],
                        lessons[time]["type"],
                        lessons[time]["teacher"],
                    )
                )
                await sleep(0.5)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")


async def cmd_info(message: types.Message):
    if not await db.userExsist(message.from_user.id):
        await message.answer(
            f"‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã",
            reply_markup=await kb_client(await db.userExsist(message.from_id)),
        )
    else:
        msg = await message.answer("‚åõ –ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ ‚åõ")
        info = await db.userInfo(message.from_user.id)
        lms = LMS(info["email"], info["password"], leanguage="ru")
        info = lms.get_info()
        await msg.edit_text(
            f"üë§ –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n–í–∞—Å –∑–æ–≤—É—Ç  {info['name']}\n\nüì© –°–æ–æ–±—â–µ–Ω–∏–π: {info['amount_messages']}\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {info['amount_notifications']}"
        )


def register_handlers_stats(dp: Dispatcher):
    dp.register_message_handler(cmd_schedule, Text(equals="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    dp.register_message_handler(cmd_info, Text(equals="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from handlers.utils import login_required_fsm
from aiogram import Dispatcher, types
from keyboards import ClientKeyboard
from lms_synergy_library import LMS
from create_bot import db


class Auth(StatesGroup):
    user_id = State()
    email = State()
    password = State()


async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç —è synergy.bot, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ lms.synegy.ru",
        reply_markup=await ClientKeyboard(message.from_user.id).kb_client(),
    )


async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "‚ùó –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=await ClientKeyboard(message.from_user.id).kb_client(),
    )


async def auth_step(message: types.Message, state: FSMContext):
    await Auth.user_id.set()
    await state.update_data(user_id=message.from_user.id)
    await Auth.email.set()
    await message.answer(
        "üì¨ –í–≤–µ–¥–∏—Ç–µ email", reply_markup=await ClientKeyboard.kb_cancel()
    )


async def pass_step(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await Auth.password.set()
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=await ClientKeyboard.kb_cancel()
    )


async def res_step(message: types.Message, state: FSMContext):
    msg = await message.answer(
        "‚åõ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚åõ", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(password=message.text)
    user_data = await state.get_data()
    lms = LMS(user_data["email"], user_data["password"])
    if lms.verify():
        db.user_add(
            user_data["user_id"],
            user_data["email"],
            user_data["password"],
            lms.type_user,
        )
        amount_msg = lms.get_amount_messages()
        amount_notif = lms.get_amount_notifications()
        await msg.delete()
        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n\nüì¨ –£ –≤–∞—Å {amount_msg} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\nüîî –£ –≤–∞—Å {amount_notif} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        )
        await message.answer(
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ üëá",
            reply_markup=await ClientKeyboard(message.from_user.id).kb_client(),
        )
    else:
        await message.answer("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        await message.answer(
            "‚ùó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ",
            reply_markup=await ClientKeyboard(message.from_user.id).kb_client(),
        )
    await state.finish()


@login_required_fsm
async def cmd_exit(message: types.Message, state: FSMContext):
    await state.finish()
    db.del_all_info_user(message.from_user.id)
    await message.answer(
        "‚ùó –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
        reply_markup=await ClientKeyboard(message.from_user.id).kb_client(),
    )


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands="start", state="*")
    dp.register_message_handler(cmd_cancel, commands="–û—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(
        cmd_cancel, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*"
    )
    dp.register_message_handler(auth_step, Text(equals="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"), state="*")
    dp.register_message_handler(
        pass_step, state=Auth.email, content_types=types.ContentTypes.TEXT
    )
    dp.register_message_handler(
        res_step, state=Auth.password, content_types=types.ContentTypes.TEXT
    )
    dp.register_message_handler(cmd_exit, Text(equals="–í—ã–π—Ç–∏"), state="*")
